abon_nrocomprobante character varying(20),
abon_diasliq double precision NOT NULL,
abon_diamora double precision NOT NULL,
abon_valorcapitaladicional double precision,  
  
cred_hora character varying(8),
cred_estado character varying(20),
cred_nrocheque character varying(20),
cred_fechaultimopago character varying(10),
cred_abonocapital double precision,  


id_pers integer NOT NULL, -- Pagare
 

direccion_pers character varying(100), -- Persona
telefono_pers character varying(30), -- Persona


ALTER TABLE contable.abono ADD COLUMN abon_periodoliquidado character varying(25);
ALTER TABLE contable.abono ADD COLUMN abon_saldo double precision;
update contable.abono set abon_saldo = 0 ;

CREATE TABLE contable.aud_credito
(
  cred_id numeric(30,0) NOT NULL,
  ticr_id numeric(30,0) NOT NULL,
  pres_id numeric(30,0) NOT NULL,
  paga_id numeric(30,0) NOT NULL,
  cred_fechainiciacredito character varying(10),
  cred_montocredito double precision,
  cred_saldo double precision,
  cred_interes double precision,
  cred_valorseguro double precision,
  cred_fechamodificacion character varying(10),
  cred_interesmora double precision,
  cred_otroscargos double precision,
  cred_registradopor character varying(30),
  cred_hora character varying(8),
  cred_estado character varying(20),
  cred_nrocheque character varying(20),
  cred_fechaultimopago character varying(10),
  cred_abonocapital double precision,
  cred_operacion character varying(1)
)WITH (OIDS=FALSE);

ALTER TABLE contable.aud_credito OWNER TO postgres;

CREATE OR REPLACE FUNCTION  contable.insert_aud_credito() RETURNS trigger AS '
	BEGIN
		INSERT INTO contable.aud_credito(
		  cred_id,
		  ticr_id,
		  pres_id,
		  paga_id,
		  cred_fechainiciacredito,
		  cred_montocredito,
		  cred_saldo,
		  cred_interes,
		  cred_valorseguro,
		  cred_fechamodificacion,
		  cred_interesmora,
		  cred_otroscargos,
		  cred_registradopor,
		  cred_hora,
		  cred_estado,
		  cred_nrocheque,
		  cred_fechaultimopago,
		  cred_abonocapital,
		  cred_operacion)
		VALUES (
		  NEW.cred_id,
		  NEW.ticr_id,
		  NEW.pres_id,
		  NEW.paga_id,
		  NEW.cred_fechainiciacredito,
		  NEW.cred_montocredito,
		  NEW.cred_saldo,
		  NEW.cred_interes,
		  NEW.cred_valorseguro,
		  NEW.cred_fechamodificacion,
		  NEW.cred_interesmora,
		  NEW.cred_otroscargos,
		  NEW.cred_registradopor,
		  NEW.cred_hora,
		  NEW.cred_estado,
		  NEW.cred_nrocheque,
		  NEW.cred_fechaultimopago,
		  NEW.cred_abonocapital,
		  ''I'');
		RETURN NULL;
	END;
' LANGUAGE plpgsql;

CREATE TRIGGER tr_i_contable_credito AFTER INSERT ON contable.credito FOR EACH ROW EXECUTE PROCEDURE contable.insert_aud_credito();


CREATE OR REPLACE FUNCTION  contable.update_aud_credito() RETURNS trigger AS '
	BEGIN
		INSERT INTO contable.aud_credito(
		  cred_id,
		  ticr_id,
		  pres_id,
		  paga_id,
		  cred_fechainiciacredito,
		  cred_montocredito,
		  cred_saldo,
		  cred_interes,
		  cred_valorseguro,
		  cred_fechamodificacion,
		  cred_interesmora,
		  cred_otroscargos,
		  cred_registradopor,
		  cred_hora,
		  cred_estado,
		  cred_nrocheque,
		  cred_fechaultimopago,
		  cred_abonocapital,
		  cred_operacion)
		VALUES (
		  NEW.cred_id,
		  NEW.ticr_id,
		  NEW.pres_id,
		  NEW.paga_id,
		  NEW.cred_fechainiciacredito,
		  NEW.cred_montocredito,
		  NEW.cred_saldo,
		  NEW.cred_interes,
		  NEW.cred_valorseguro,
		  NEW.cred_fechamodificacion,
		  NEW.cred_interesmora,
		  NEW.cred_otroscargos,
		  NEW.cred_registradopor,
		  NEW.cred_hora,
		  NEW.cred_estado,
		  NEW.cred_nrocheque,
		  NEW.cred_fechaultimopago,
		  NEW.cred_abonocapital,
		  ''U'');
		 RETURN NULL;
	END;
' LANGUAGE plpgsql;

CREATE TRIGGER tr_u_contable_credito AFTER UPDATE ON contable.credito FOR EACH ROW EXECUTE PROCEDURE contable.update_aud_credito();

CREATE TABLE contable.aud_presupuesto
(
  pres_id numeric(30,0) NOT NULL,
  pres_valor double precision,
  pres_descripcion character varying(32),
  pres_fechamodificacion character varying(10),
  pres_hora character varying(8),
  pres_registradopor character varying(30),
  pres_operacion character varying(1)
)WITH (OIDS=FALSE);

ALTER TABLE contable.aud_presupuesto OWNER TO postgres;

CREATE OR REPLACE FUNCTION  contable.insert_aud_presupuesto() RETURNS trigger AS '
	BEGIN
		INSERT INTO contable.aud_presupuesto(
		  pres_id,
		  pres_valor,
		  pres_descripcion,
		  pres_fechamodificacion,
		  pres_hora,
		  pres_registradopor,
		  pres_operacion)
		VALUES (
		  NEW.pres_id,
		  NEW.pres_valor,
		  NEW.pres_descripcion,
		  NEW.pres_fechamodificacion,
		  NEW.pres_hora,
		  NEW.pres_registradopor,
		  ''I'');
		RETURN NULL;
	END;
' LANGUAGE plpgsql;

CREATE TRIGGER tr_i_contable_presupuesto AFTER INSERT ON contable.presupuesto FOR EACH ROW EXECUTE PROCEDURE contable.insert_aud_presupuesto();

CREATE OR REPLACE FUNCTION  contable.update_aud_presupuesto() RETURNS trigger AS '
	BEGIN
		INSERT INTO contable.aud_presupuesto(
		  pres_id,
		  pres_valor,
		  pres_descripcion,
		  pres_fechamodificacion,
		  pres_hora,
		  pres_registradopor,
		  pres_operacion)
		VALUES (
		  NEW.pres_id,
		  NEW.pres_valor,
		  NEW.pres_descripcion,
		  NEW.pres_fechamodificacion,
		  NEW.pres_hora,
		  NEW.pres_registradopor,
		  ''U'');
		RETURN NULL;
	END;
' LANGUAGE plpgsql;

CREATE TRIGGER tr_u_contable_presupuesto AFTER UPDATE ON contable.presupuesto FOR EACH ROW EXECUTE PROCEDURE contable.update_aud_presupuesto();


CREATE TABLE contable.aud_abono
(
  abon_id numeric(30,0) NOT NULL,
  cred_id numeric(30,0),
  abon_valortotal double precision,
  abon_valorcapital double precision,
  abon_valorinteres double precision,
  abon_valorseguro double precision,
  abon_fecha character varying(10),
  abon_valorinteresmora double precision,
  abon_otrocargo double precision,
  abon_fechamodificacion character varying(10),
  abon_hora character varying(8),
  abon_registradopor character varying(30),
  abon_nrocomprobante character varying(20),
  abon_diasliq double precision NOT NULL,
  abon_diamora double precision NOT NULL,
  abon_valorcapitaladicional double precision,
  abon_periodoliquidado character varying(25),
  abon_saldo double precision,
  abon_operacion character varying(1)
)WITH (OIDS=FALSE);

ALTER TABLE contable.aud_abono OWNER TO postgres;

CREATE OR REPLACE FUNCTION  contable.insert_aud_abono() RETURNS trigger AS '
	BEGIN
		INSERT INTO contable.aud_abono(
		  abon_id,
		  cred_id,
		  abon_valortotal,
		  abon_valorcapital,
		  abon_valorinteres,
		  abon_valorseguro,
		  abon_fecha,
		  abon_valorinteresmora,
		  abon_otrocargo,
		  abon_fechamodificacion,
		  abon_hora,
		  abon_registradopor,
		  abon_nrocomprobante,
		  abon_diasliq,
		  abon_diamora,
		  abon_valorcapitaladicional,
		  abon_periodoliquidado,
  		  abon_saldo,
		  abon_operacion)
		VALUES (
		  NEW.abon_id,
		  NEW.cred_id,
		  NEW.abon_valortotal,
		  NEW.abon_valorcapital,
		  NEW.abon_valorinteres,
		  NEW.abon_valorseguro,
		  NEW.abon_fecha,
		  NEW.abon_valorinteresmora,
		  NEW.abon_otrocargo,
		  NEW.abon_fechamodificacion,
		  NEW.abon_hora,
		  NEW.abon_registradopor,
		  NEW.abon_nrocomprobante,
		  NEW.abon_diasliq,
		  NEW.abon_diamora,
		  NEW.abon_valorcapitaladicional,
		  NEW.abon_periodoliquidado,
  		  NEW.abon_saldo,
		  ''I'');
		RETURN NULL;
	END;
' LANGUAGE plpgsql;

CREATE TRIGGER tr_i_contable_abono AFTER INSERT ON contable.abono FOR EACH ROW EXECUTE PROCEDURE contable.insert_aud_abono();

CREATE OR REPLACE FUNCTION  contable.update_aud_abono() RETURNS trigger AS '
	BEGIN
		INSERT INTO contable.aud_abono(
		  abon_id,
		  cred_id,
		  abon_valortotal,
		  abon_valorcapital,
		  abon_valorinteres,
		  abon_valorseguro,
		  abon_fecha,
		  abon_valorinteresmora,
		  abon_otrocargo,
		  abon_fechamodificacion,
		  abon_hora,
		  abon_registradopor,
		  abon_nrocomprobante,
		  abon_diasliq,
		  abon_diamora,
		  abon_valorcapitaladicional,
		  abon_periodoliquidado,
  		  abon_saldo,
		  abon_operacion)
		VALUES (
		  NEW.abon_id,
		  NEW.cred_id,
		  NEW.abon_valortotal,
		  NEW.abon_valorcapital,
		  NEW.abon_valorinteres,
		  NEW.abon_valorseguro,
		  NEW.abon_fecha,
		  NEW.abon_valorinteresmora,
		  NEW.abon_otrocargo,
		  NEW.abon_fechamodificacion,
		  NEW.abon_hora,
		  NEW.abon_registradopor,
		  NEW.abon_nrocomprobante,
		  NEW.abon_diasliq,
		  NEW.abon_diamora,
		  NEW.abon_valorcapitaladicional,
		  NEW.abon_periodoliquidado,
  		  NEW.abon_saldo,
		  ''U'');
		RETURN NULL;
	END;
' LANGUAGE plpgsql;

CREATE TRIGGER tr_u_contable_abono AFTER UPDATE ON contable.abono FOR EACH ROW EXECUTE PROCEDURE contable.update_aud_abono();


--Insert tipo credito
insert into contable.tipocredito values (nextval('contable.s_ticr_id'), 'CREDITO TIPO B',36,3,1,1,'1',CURRENT_DATE,to_char(current_timestamp,'HH24:MI:SS'),'vhgomezl',12)
--

CREATE TABLE contable.tipocobrorecargos
(
  tcre_id numeric(30,0) NOT NULL,
  tcre_nombre character varying(50),
  tcre_fechamodificacion character varying(10),
  tcre_hora character varying(8),
  tcre_registradopor character varying(30),
  CONSTRAINT pk_tipocobrorecargo PRIMARY KEY (tcre_id )
)WITH (OIDS=FALSE);


CREATE TABLE contable.otrosrecargos
(
  otre_id numeric(30,0) NOT NULL,
  tcre_id numeric(30,0) NOT NULL,
  cred_id numeric(30,0) NOT NULL,
  otcre_descripcion character varying(100),
  otre_monto double precision,
  otre_saldo double precision,
  otre_estado character varying(15),
  otre_fechamodificacion character varying(10),
  otre_hora character varying(8),
  otre_registradopor character varying(30),
  CONSTRAINT pk_otrorecargo PRIMARY KEY (otre_id ),
  CONSTRAINT fk_otrorecargo_credito FOREIGN KEY (cred_id)
      REFERENCES contable.credito (cred_id) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT,
  CONSTRAINT fk_otrorecargo_tipocobrorecargo FOREIGN KEY (tcre_id)
      REFERENCES contable.tipocobrorecargos (tcre_id) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT
)WITH (OIDS=FALSE);




////////////////////////////////////////////////////////////////////
Cambios BD New Project
CREATE SCHEMA historiaclinica
  AUTHORIZATION postgres;
  
CREATE TABLE historiaclinica.profesionalsalud
(
  prfs_id numeric NOT NULL,
  id_pers numeric NOT NULL,
  prfs_nrotarjetaprof character varying(20),
  prfs_fechacambio character varying(10) NOT NULL,
  prfs_horacambio character varying(8) NOT NULL,
  prfs_registradopor character varying(30) NOT NULL,
  prfs_profesion character varying(100),
  prfs_estado character varying(1) NOT NULL,
  CONSTRAINT pk_prfs_id PRIMARY KEY (prfs_id ),
  CONSTRAINT fk_prfs_pres FOREIGN KEY (id_pers)
      REFERENCES portal.persona (id_pers) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE historiaclinica.profesionalsalud
  OWNER TO postgres;

-- Trigger: tr_auto_prfs_id on historiaclinica.profesionalsalud

-- DROP TRIGGER tr_auto_prfs_id ON historiaclinica.profesionalsalud;

CREATE TRIGGER tr_auto_prfs_id
  BEFORE INSERT OR UPDATE
  ON historiaclinica.profesionalsalud
  FOR EACH ROW
  EXECUTE PROCEDURE autoinc('prfs_id', 'historiaclinica.seq_prfs_id');


CREATE TABLE historiaclinica.agendamedica
(
  agme_id numeric NOT NULL,
  prfs_id numeric NOT NULL,
  agme_fechacambio character varying(10) NOT NULL,
  agme_horacambio character varying(8) NOT NULL,
  agme_registradopor character varying(30) NOT NULL,
  CONSTRAINT pk_agme_id PRIMARY KEY (agme_id ),
  CONSTRAINT fk_agme_prfs FOREIGN KEY (prfs_id)
      REFERENCES historiaclinica.profesionalsalud (prfs_id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE historiaclinica.agendamedica
  OWNER TO postgres;
  

CREATE TABLE historiaclinica.eventosagenda
(
  even_id numeric NOT NULL,
  agme_id numeric NOT NULL,
  even_fechacambio character varying(10) NOT NULL,
  even_horacambio character varying(8) NOT NULL,
  even_registradopor character varying(30) NOT NULL,
  CONSTRAINT pk_even_id PRIMARY KEY (even_id ),
  CONSTRAINT fk_even_agme FOREIGN KEY (agme_id)
      REFERENCES historiaclinica.agendamedica (agme_id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE historiaclinica.eventosagenda
  OWNER TO postgres;


CREATE TABLE historiaclinica.participanteagenda
(
  part_id numeric NOT NULL,
  even_id numeric NOT NULL,
  part_fechacambio character varying(10) NOT NULL,
  part_horacambio character varying(8) NOT NULL,
  part_registradopor character varying(30) NOT NULL,
  CONSTRAINT pk_part_id PRIMARY KEY (part_id ),
  CONSTRAINT fk_part_even FOREIGN KEY (even_id)
      REFERENCES historiaclinica.eventosagenda (even_id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE historiaclinica.participanteagenda
  OWNER TO postgres;
  
  
CREATE SEQUENCE historiaclinica.seq_part_id
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
ALTER TABLE historiaclinica.seq_part_id
  OWNER TO postgres;
  

CREATE SEQUENCE historiaclinica.seq_agme_id
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
ALTER TABLE historiaclinica.seq_agme_id
  OWNER TO postgres;
  
      
CREATE SEQUENCE historiaclinica.seq_even_id
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
ALTER TABLE historiaclinica.seq_even_id
  OWNER TO postgres;
  
  
CREATE SEQUENCE historiaclinica.seq_prfs_id
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 29
  CACHE 1;
ALTER TABLE historiaclinica.seq_prfs_id
  OWNER TO postgres;        
      
---------------------------------------------------------------------
---------------------------------------------------------------------  
Creacion campos esquema HISCLINICA  
---------------------------------------------------------------------
---------------------------------------------------------------------
Tabla Profesional
alter table "HISCLINICA"."PROFESIONAL" ADD prof_estado character varying(1);
alter table "HISCLINICA"."PROFESIONAL" ADD prof_nrotarjetaprof character varying(30);
alter table "HISCLINICA"."PROFESIONAL" ADD prof_especialidad  character varying(50);
alter table "HISCLINICA"."PROFESIONAL" ADD prof_backgroundColorAgen character varying(7);

Tabla Agenda
alter table "HISCLINICA"."AGENDA" ADD agen_duracionevento character varying(8) NOT NULL;
alter table "HISCLINICA"."AGENDA" ADD agen_scrolltime character varying(8) NOT NULL;
alter table "HISCLINICA"."AGENDA" ADD agen_mintime character varying(8) NOT NULL;
alter table "HISCLINICA"."AGENDA" ADD agen_maxtime character varying(8) NOT NULL;
alter table "HISCLINICA"."AGENDA" ADD agen_alldayslot character varying(1) NOT NULL;
alter table "HISCLINICA"."AGENDA" ADD agen_alldaytext character varying(30) NOT NULL;
ALTER TABLE "HISCLINICA"."AGENDA" ALTER COLUMN agen_fechaini TYPE character varying(10);
ALTER TABLE "HISCLINICA"."AGENDA" ALTER COLUMN agen_fechafin TYPE character varying(10);
alter table "HISCLINICA"."AGENDA" ADD agen_pathconstantes character varying(30);


CREATE TABLE "HISCLINICA"."PARTICIPANTE"
(
  part_id numeric NOT NULL,
  even_id numeric NOT NULL,
  part_documento character varying(30),
  part_tipodocumento character varying(5),
  part_pnombre character varying(30),
  part_snombre character varying(30),
  part_papellido character varying(30),
  part_sapellido character varying(30),
  part_telefono character varying(30),
  part_email character varying(50),
  part_fechacambio character varying(10) NOT NULL,
  part_horacambio character varying(8) NOT NULL,
  part_registradopor character varying(30) NOT NULL,
  CONSTRAINT pk_part_id PRIMARY KEY (part_id ),
  CONSTRAINT fk_part_even FOREIGN KEY (even_id)
      REFERENCES "HISCLINICA"."EVENTOS" (even_id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE "HISCLINICA"."PARTICIPANTE"
  OWNER TO "HISCLINICA";


CREATE SEQUENCE "HISCLINICA"."SEQ_PART_ID"
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
ALTER TABLE "HISCLINICA"."SEQ_PART_ID"
  OWNER TO "HISCLINICA";



alter table "HISCLINICA"."EVENTOS" ALTER COLUMN even_url TYPE character varying(300);
alter table "HISCLINICA"."PARTICIPANTE" alter column part_telefono type character varying(100);
alter table "HISCLINICA"."PARTICIPANTE" alter column part_email type character varying(100); 

----------------
-- 06-02-2015 --
----------------
CREATE TABLE "HISCLINICA"."TIPOPROCEDIMIENTO"
(
  tipr_id numeric(30,0) NOT NULL,
  tipr_nombre character varying(50) NOT NULL,
  tipr_descripcion character varying(200),
  tipr_fechacambio character varying(10) NOT NULL,
  tipr_horacambio character varying(8) NOT NULL,
  tipr_registradopor character varying(30) NOT NULL,
  CONSTRAINT pk_tipr_id PRIMARY KEY (tipr_id )
)
WITH (
  OIDS=FALSE
);
ALTER TABLE "HISCLINICA"."TIPOPROCEDIMIENTO"
  OWNER TO postgres;


CREATE TABLE "HISCLINICA"."PROCEDIMIENTOS"
(
  prto_id numeric(30,0) NOT NULL,
  tipr_id numeric(30,0) NOT NULL,
  prto_codigo character varying(10) NOT NULL,
  prto_nombre character varying(50) NOT NULL,
  prto_descripcion character varying(200),
  prto_color character varying(7),
  prto_pathimagen character varying(150),
  prto_fechacambio character varying(10) NOT NULL,
  prto_horacambio character varying(8) NOT NULL,
  prto_registradopor character varying(30) NOT NULL,
  CONSTRAINT pk_prto_id PRIMARY KEY (prto_id ),
  CONSTRAINT fk_prto_tipr FOREIGN KEY (tipr_id)
      REFERENCES "HISCLINICA"."TIPOPROCEDIMIENTO" (tipr_id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE "HISCLINICA"."PROCEDIMIENTOS"
  OWNER TO postgres;
  
  
CREATE SEQUENCE "HISCLINICA"."SEQ_PRTO_ID"
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
ALTER TABLE "HISCLINICA"."SEQ_PRTO_ID"
  OWNER TO postgres;
  
  
CREATE SEQUENCE "HISCLINICA"."SEQ_TIPR_ID"
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
ALTER TABLE "HISCLINICA"."SEQ_TIPR_ID"
  OWNER TO postgres;  
    